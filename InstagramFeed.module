<?php

/**
 * InstagramFeed
 *
 * See README.md for usage instructions.
 *
 * ProcessWire 2.x
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 *
 * @author Tabea David <info@justonestep.de>
 * @version 0.0.1
 * @copyright Copyright (c) 2015 KF Interactive, www.kf-interactive.com, <info@kf-interactive.com>
 * @see https://github.com/justonestep/processwire-instagramfeed
 * @see http://www.processwire.com
 */

/**
 * Class InstagramFeed
 */
class InstagramFeed extends WireData implements Module, ConfigurableModule {

  const MODULE = 'InstagramFeed';

  const API_URL_AUTHORIZE = 'https://api.instagram.com/oauth/authorize/';
  const API_URL_FEED = 'https://api.instagram.com/v1/users/self/media/recent/';
  const API_URL_ACCESS_TOKEN = 'https://api.instagram.com/oauth/access_token/';
  const API_URL_SEARCH = 'https://api.instagram.com/v1/users/search/';

  /**
   * Retrieves module meta data
   * Implementation of the Module interface
   *
   * @return array
   * @see http://processwire.com/apigen/class-Module.html
   */
  public static function getModuleInfo() {
    return array(
      'title' => 'Instagram Feed',
      'summary' => 'Represents the instagram feed of any user',
      'version' => 001,
      'href' => 'https://github.com/justonestep/processwire-instagramfeed '
    );
  }

  /**
   * @field array Default config values
   */
  protected static $defaults = array(
    'clientId' => '',
    'clientSecret' => '',
    'accessToken' => '',
    'username' => '',
    'imageCount' => 4,
  );

  /**
   * Retrieves the list of config input fields
   *
   * Implementation of the ConfigurableModule interface
   *
   * @param array $data The config data
   * @return InputfieldWrapper
   * @see http://processwire.com/apigen/class-ConfigurableModule.html
   */
  public static function getModuleConfigInputfields(array $data) {
    $data = array_merge(self::$defaults, $data);

    $fields = new InputfieldWrapper();

    $help = wire('modules')->get('InputfieldMarkup');
    $link = wire('modules')->get(self::MODULE)->getCode();
    $helpContent = <<<EOD
<h2>Instructions:</h2>
<ol>
<li>Register a new instagram Client: <a href="https://instagram.com/developer/clients/manage/">at instagram</a>. <strong>It's really important to add the current url as redirect url. (For example "http://page.dev/processwire/module/edit?name=InstagramFeed/")</strong></li>
<li>Complete the form below except the access token input field (this value will be generated) and click submit.</li>
<li>Click the following link to generate code and access token: $link</li>
</ol>
<p><a  target="_blank" href="https://github.com/justonestep/processwire-instagramfeed">Read more</a></p>
EOD;
    $help->value = $helpContent;
    $fields->append($help);

    $field = wire('modules')->get('InputfieldText');
    $field->label = __('Client ID');
    $field->description = __('Instagram');
    $field->attr('name', 'clientId');
    $field->attr('size', 40);
    $field->attr('value', $data['clientId']);
    $field->columnWidth = 50;
    $field->required = 1;
    $fields->append($field);

    $field = wire('modules')->get('InputfieldText');
    $field->label = __('Client Secret');
    $field->description = __('Instagram');
    $field->attr('name', 'clientSecret');
    $field->attr('size', 40);
    $field->attr('value', $data['clientSecret']);
    $field->columnWidth = 50;
    $field->required = 1;
    $fields->append($field);

    $field = wire('modules')->get('InputfieldText');
    $field->label = __('Access Token');
    $field->description = __('Will be generated by clicking the link above (have a look at instructions number three).');
    $field->attr('name', 'accessToken');
    $field->attr('size', 60);
    $field->attr('value', $data['accessToken']);
    $field->columnWidth = 100;
    $fields->append($field);

    $field = wire('modules')->get('InputfieldText');
    $field->label = __('Username');
    $field->description = __('Instagram username to display content from (default: self).');
    $field->attr('name', 'username');
    $field->attr('size', 40);
    $field->attr('value', $data['username']);
    $field->columnWidth = 50;
    $fields->append($field);

    $field = wire('modules')->get('InputfieldText');
    $field->label = __('Image Count');
    $field->description = __('Count of media to return.');
    $field->attr('name', 'imageCount');
    $field->attr('size', 4);
    $field->attr('value', $data['imageCount']);
    $field->columnWidth = 50;
    $fields->append($field);

    return $fields;
  }

  /**
   * Initialize the module
   * Initialize a new web contact form
   *
   * Implementation of the Module interface
   *
   * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
   * when ProcessWire's API is ready. As a result, this is a good place to attach hooks.
   *
   * @see http://processwire.com/apigen/class-Module.html
   *
   * @param Template $template Template object holding the form's fields.
   *
   */
  public function init($username = null) {
    if (!empty($username)) $this->username = $username;

    $connection = new WireHttp;

    $request = array(
      'access_token' => $this->accessToken,
      'count' => $this->imageCount
    );

    $userId = $this->getUserIdByUsername($this->username);
    $url = !empty($userId) ? str_replace('self', $userId, self::API_URL_FEED) : self::API_URL_FEED;
    $data = $connection->getJson($url, true, $request);

    if (!empty($data) && $data['meta']['code'] === 200) {
      $data = $data['data'];
    }

    return $data;
  }

  public function getUserIdByUsername($username = null) {
    $connection = new WireHttp;

    $request = array(
      'access_token' => $this->accessToken,
      'q' => $username
    );

    $data = $connection->getJson(self::API_URL_SEARCH, true, $request);

    $userId = null;
    if (!empty($data) && $data['meta']['code'] === 200) {
      $userId = $data['data'][0]['id'];
    }

    return $userId;

  }

  public function getAccessToken($redirect) {
    $connection = new WireHttp;

    $request = array(
      'client_id' => $this->clientId,
      'client_secret' => $this->clientSecret,
      'grant_type' => 'authorization_code',
      'redirect_uri' => $redirect,
      'code' => $this->input->get->code
    );

    $data = $connection->post(self::API_URL_ACCESS_TOKEN, $request);

    if ($data) {
      $result = json_decode($data, true);

      if ($result['access_token']) {
        $data = $this->modules->getModuleConfigData(self::MODULE);
        $data['accessToken'] = $result['access_token'];
        wire('modules')->saveModuleConfigData(self::MODULE, $data);
      }
    }

  }

  public function getCode() {
    $http = $this->config->https ? 'https://' : 'http://';
    $redirect = $http . $this->config->httpHost . $this->page->url;

    // complete module edit link
    if ($this->page->template == "admin") {
      $redirect .= 'edit?name=' . self::MODULE;

      if ($this->input->get->code) {
        $accessToken = $this->getAccessToken($redirect);
        $this->session->redirect($redirect);
      }
    }

    if (!empty($this->clientId)) {
      $request = array(
        'client_id' => $this->clientId,
        'redirect_uri' => $redirect,
        'response_type' => 'code'
      );

      if ($this->user->isSuperuser()) {
        $href = self::API_URL_AUTHORIZE . '?' . http_build_query($request);
        $link = "<a href='$href'>" . __('get Access Token') . "</a>";
      }
    }

    return isset($link) ? $link : '';
  }

}
